#ifndef MOVEMENT_NXC
#define MOVEMENT_NXC 1

#define TRUE 1
#define FALSE 0

//movement codes
#define LEFT 1
#define RIGHT 0

#define RING_DIAMETER 40//cm

#define LIGHT_SENSOR_1 IN_4
#define ULTRASONIC_SENSOR IN_1

#define ULTRASONIC_MOTOR OUT_B
#define LEFT_MOTOR OUT_A
#define RIGHT_MOTOR OUT_C
#define BOTH_MOTORS OUT_AC

#define ROTATE_SPEED 100
#define NORMAL_FW_SPEED 100
#define ENGAGE_FW_SPEED NORMAL_FW_SPEED

#define RETREAT_SPEED 100
#define EDGE_RETREAT_TIME 200

#define FULL_ROTATION 1000
#define ROTATION_PER_DEGREE FULL_ROTATION / 360

void lightSensorRoutine(void);
void rotate(int degrees);
void engageRotate(int enemyAngle, int enemyDistance);
void enemyFound(int angle, byte distance);

//enemy position global variables
int enemyPositionClear = TRUE; //quick workaround, later would be better to introduce a timer. If not updating within 1 second, variable is false
int enemyAngle = 0; //0 to 180 is clockwise, 0 to -180 is anticlockwsie
int tempAngle;
byte enemyDistance = 30;

int engagingEnemy = FALSE;
int lightSensor_found = FALSE;

task movement() {
     while (true) {
           if (lightSensor_found) {
                  lightSensorRoutine();
           }
           if (engagingEnemy) {
                  if (abs(enemyAngle) > 20) {
                         tempAngle = enemyAngle;
                         //engageRotate(tempAngle, enemyDistance);
                         rotate(tempAngle);
                         enemyAngle = 0;
                  } else {
                         //goes forward until it needs to do something else
                         OnFwd(BOTH_MOTORS, ENGAGE_FW_SPEED);
                         while (engagingEnemy && (abs(enemyAngle) <= 20) && (!lightSensor_found));
						 //until (!engangingEnemy || (abs(enemyAngle) > 10) || lightSensor_found);
                  }
           } else if (enemyPositionClear) {
                  //moves to enemy
                  //might be useful to handle a case where (enemyDistance < n : engageRotate())
                  if (abs(enemyAngle) > 30) {
                        tempAngle = enemyAngle;
                        rotate(tempAngle);
                        enemyAngle = 0;
                        //ignore below, used to be a while loop --> would be better as a while loop.
                        //this will likely  cause it to constantly rotate, if ultrasonic is quick on updating. needs to have something to sort that out.
                  }
                  OnFwd(BOTH_MOTORS, ENGAGE_FW_SPEED);
                  while (!engagingEnemy && (!lightSensor_found) && (abs(enemyAngle) <= 30));
                  //until(engagingEnemy || lightSensor_found);
           } else {
                  //simply moves forward until it finds the edge of the ring
                  OnFwd(BOTH_MOTORS, NORMAL_FW_SPEED);
                  while ((!engagingEnemy) && (!lightSensor_found));
                  //until(engagingEnemy || lightSensor_found);
           }
     }
}

void lightSensorRoutine(void) {
     /*if (!enemyPositionClear) {
            rotate(180);
     } else if (abs(enemyAngle) <= 180) {
            rotate(enemyAngle);
     }*/
     OnRev(BOTH_MOTORS, RETREAT_SPEED);
     Wait(EDGE_RETREAT_TIME);
     Off(BOTH_MOTORS);
     rotate(180);
     lightSensor_found = FALSE;
}

void rotate(int degrees) {
     //using rotateMotorEx, might not work exactly as expected (testing and callibration required).
     if (degrees > 0 ) {
           OnRev(RIGHT_MOTOR, ROTATE_SPEED);
           RotateMotor(LEFT_MOTOR, ROTATE_SPEED, degrees*ROTATION_PER_DEGREE);
           Off(RIGHT_MOTOR);     
     } else if (degrees < 0) {
           OnFwd(RIGHT_MOTOR, ROTATE_SPEED);
           RotateMotor(LEFT_MOTOR, ROTATE_SPEED, degrees*ROTATION_PER_DEGREE);
           Off(RIGHT_MOTOR);
     }
}

void engageRotate(int enemyAngle, int enemyDistance) {
     //currenly the same as rotate, change to a more appropriate function after testing
     rotate(enemyAngle);
}

void enemyFound(int angle, byte distance) {
     enemyAngle = angle;
     enemyDistance = distance;
     enemyPositionClear = TRUE;
}

#endif
