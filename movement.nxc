#ifndef MOVEMENT_NXC
#define MOVEMENT_NXC 1

#define TRUE 1
#define FALSE 0

//movement codes
#define LEFT 1
#define RIGHT 0

#define RING_DIAMETER 40//cm

#define LIGHT_SENSOR_1 IN_1
#define ULTRASONIC_SENSOR IN_3

#define ULTRASONIC_MOTOR OUT_B
#define LEFT_MOTOR OUT_A
#define RIGHT_MOTOR OUT_C
#define BOTH_MOTORS OUT_AC

#define ROTATE_SPEED 100
#define ENGAGE_FW_SPEED 100
#define NORMAL_FW_SPEED 100

void lightSensorRoutine(void);
void rotate(int degrees);
void engageRotate(int enemyAngle, int enemyDistance);
void enemyFound(int angle, byte distance);

//enemy position global variables
int enemyPositionClear = TRUE; //quick workaround, later would be better to introduce a timer. If not updating within 1 second, variable is false
int enemyAngle; //0 to 180 is clockwise, 0 to -180 is anticlockwsie
byte enemyDistance;

int engagingEnemy = FALSE;
int lightSensor_found = FALSE;

task movement() {
     while (true) {
           if (lightSensor_found) {
                  lightSensorRoutine();
           }
           if (engagingEnemy) {
                  if (abs(enemyAngle) > 20) {
                         engageRotate(enemyAngle, enemyDistance);
                  } else {
                         //goes forward until it needs to do something else
                         OnFwd(BOTH_MOTORS, ENGAGE_FW_SPEED);
                         while (engagingEnemy && (abs(enemyAngle) <= 20) && (!lightSensor_found));
						 //until (!engangingEnemy || (abs(enemyAngle) > 10) || lightSensor_found);
                  }
           } else if (enemyPositionClear) {
                  //moves to enemy
                  //might be useful to handle a case where (enemyDistance < n : engageRotate())
                  if (abs(enemyAngle) > 10) {
                        rotate(enemyAngle);
                        //ignore below, used to be a while loop --> would be better as a while loop.
                        //this will likely  cause it to constantly rotate, if ultrasonic is quick on updating. needs to have something to sort that out.
                  }
                  OnFwd(BOTH_MOTORS, ENGAGE_FW_SPEED);
                  while (!engagingEnemy || (!lightSensor_found) || abs(enemyAngle <= 30));
                  //until(engagingEnemy || lightSensor_found);
           } else {
                  //simply moves forward until it finds the edge of the ring
                  OnFwd(BOTH_MOTORS, NORMAL_FW_SPEED);
                  while ((!engagingEnemy) || (!lightSensor_found));
                  //until(engagingEnemy || lightSensor_found);
           }
     }
}

void lightSensorRoutine(void) {
     if (!enemyPositionClear) {
            rotate(180);
     } else if (abs(enemyAngle) <= 180) {
            rotate(enemyAngle);
     }
     lightSensor_found = FALSE;
}

void rotate(int degrees) {
     //using rotateMotorEx, might not work exactly as expected (testing and callibration required).
     if (degrees > 0 ) {
           RotateMotorEx(BOTH_MOTORS, ROTATE_SPEED, degrees, -100, true, true);
     } else if (degrees < 0) {
           RotateMotorEx(BOTH_MOTORS, ROTATE_SPEED, degrees, 100, true, true);
     }
}

void engageRotate(int enemyAngle, int enemyDistance) {
     //currenly the same as rotate, change to a more appropriate function after testing
      if (enemyAngle > 0 ) {
           RotateMotorEx(BOTH_MOTORS, ROTATE_SPEED, enemyAngle, -100, true, true);
     } else if (enemyAngle < 0) {
           RotateMotorEx(BOTH_MOTORS, ROTATE_SPEED, enemyAngle, 100, true, true);
     }
}

void enemyFound(int angle, byte distance) {
     enemyAngle = angle;
     enemyDistance = distance;
     enemyPositionClear = TRUE;
}

#endif
